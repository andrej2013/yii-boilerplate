<?php

namespace andrej2013\yiiboilerplate\models;

use Yii;
use yii\db\ActiveRecord;
use yii\db\Query;
use andrej2013\yiiboilerplate\behaviors\History;
/**
 * This is the base-model class for table "arhistory".
 * - - - - - - - - -
 * Generated by the modified Giiant CRUD Generator
 *
 * @property integer $id
 * @property string  $table_name
 * @property integer $row_id
 * @property integer $event
 * @property string  $field_name
 * @property string  $old_value
 * @property string  $new_value
 * @property integer $created_at
 * @property integer $created_by
 * @property string  $toString
 * @property string  $entryDetails
 */
class ArHistory extends ActiveRecord
{


    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'arhistory';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [
                ['table_name', 'row_id', 'event'],
                'required',
            ],
            [
                ['row_id', 'event'],
                'integer',
            ],
            [
                ['old_value', 'new_value'],
                'string',
            ],
            [
                ['table_name', 'field_name'],
                'string',
                'max' => 255,
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id'         => Yii::t('app', 'ID'),
            'table_name' => Yii::t('app', 'Table Name'),
            'row_id'     => Yii::t('app', 'Row'),
            'event'      => Yii::t('app', 'Event'),
            'created_at' => Yii::t('app', 'Created At'),
            'created_by' => Yii::t('app', 'Created By'),
            'field_name' => Yii::t('app', 'Field Name'),
            'old_value'  => Yii::t('app', 'Old Value'),
            'new_value'  => Yii::t('app', 'New Value'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributePlaceholders()
    {
        return [];
    }


    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return [];
    }

    /**
     * Auto generated method, that returns a human-readable name as string
     * for this model. This string can be called in foreign dropdown-fields or
     * foreign index-views as a representative value for the current instance.
     * @return String
     */
    public function toString()
    {
        return $this->table_name; // this attribute can be modified
    }


    /**
     * Getter for toString() function
     * @return String
     */
    public function getToString()
    {
        return $this->toString();
    }

    /**
     * @inheritdoc
     */
    public function extraFields()
    {
        return [];
    }

    /**
     * @return string
     */
    public function getEventName()
    {
        switch ($this->event) {
            case History::EVENT_INSERT:
                return Yii::t('app', "Create");
                break;
            case History::EVENT_UPDATE:
                return Yii::t('app', "Update");
            case History::EVENT_DELETE:
                return Yii::t('app', "Delete");
            default:
                return "";
                break;
        }
    }

    /**
     * @return mixed
     */
    public function getUserName()
    {
        $user = User::findOne($this->created_by);
        if ($user) {
            return $user->toString;
        }
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(
            \app\models\User::className(),
            ['id' => 'created_by']
        );
    }
    
    public function readable()
    {
        return true;
    }
    
    public function editable()
    {
        return false;
    }
    
    public function deletable()
    {
        return false;
    }
    
        public static function typeahead($attribute, $q)
    {
        $out = [];
        $data = static::find()
                      ->select($attribute)
                      ->andWhere(['LIKE', $attribute, $q])
                      ->distinct()
                      ->orderBy($attribute)
                      ->asArray()
                      ->all();
        foreach ($data as $d) {
            $out[] = [
                'value' => $d[$attribute],
            ];
        }
        return $out;
    }

}
