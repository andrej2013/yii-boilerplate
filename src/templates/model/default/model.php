<?php
/**
 * This is the template for generating the model class of a specified table.
 * DO NOT EDIT THIS FILE! It may be regenerated with Gii.
 *
 * @var yii\web\View                                       $this
 * @var \andrej2013\yiiboilerplate\templates\model\Generator $generator
 * @var string                                             $tableName full table name
 * @var string                                             $className class name
 * @var yii\db\TableSchema                                 $tableSchema
 * @var string[]                                           $labels    list of attribute labels (name => label)
 * @var string[]                                           $hints    list of attribute hints (name => hint)
 * @var string[]                                           $rules     list of validation rules
 * @var array                                              $relations list of relations (name => relation declaration)
 */
use yii\helpers\Inflector;

// Look for a file upload
$fileUpload = false;
$uploadedFields = $generator->getUploadFields();
if (!empty($uploadedFields)) {
    $fileUpload = true;
}

$placeholders = $generator->generatePlaceholders($tableSchema);

echo "<?php\n";
?>

namespace <?= $generator->ns ?>\base;

use Yii;
use \app\models\ActiveRecord;
use yii\db\Query;
<?php if ($generator->haveType(\andrej2013\yiiboilerplate\templates\crud\Generator::TYPE_QR_CODE)) { ?>
use andrej2013\yiiboilerplate\traits\QrTrait;
<?php } ?>
<?php if ($generator->haveType(\andrej2013\yiiboilerplate\templates\crud\Generator::TYPE_GOOGLE_MAP)) { ?>
use andrej2013\yiiboilerplate\traits\GoogleMapTrait;
<?php } ?>
<?php if ($fileUpload) { ?>
use andrej2013\yiiboilerplate\traits\UploadTrait;
<?php } ?>

/**
 * This is the base-model class for table "<?= $tableName ?>".
 * - - - - - - - - -
 * Generated by the modified Giiant CRUD Generator
 *
<?php foreach ($tableSchema->columns as $column) { ?>
 * @property <?= "{$column->phpType} \${$column->name}\n" ?>
<?php } ?>
 * @property string $toString
 * @property string $entryDetails
<?php if (!empty($relations)) { ?>
 *
<?php foreach ($relations as $name => $relation) { ?>
 * @property \<?= $ns ?>\<?= $relation[1] . ($relation[2] ? '[]' : '') . ' $' . lcfirst($name) . "\n" ?>
<?php } ?>
<?php } ?>
 */
class <?= $className ?> extends ActiveRecord
{
<?php if (!empty($enum)) { ?>
    
    /**
     * ENUM field values
     */
<?php
    foreach ($enum as $column_name => $column_data) {
        foreach ($column_data['values'] as $enum_value) {
            echo '    const ' . $enum_value['const_name'] . ' = \'' . $enum_value['value'] . '\';' . PHP_EOL;
        }
    }
    ?>
    protected $enum_labels = false;
<?php } ?>
<?php if ($generator->getTableComment()->attachment) { ?>
    public $attachments;
<?php } ?>
<?php if ($fileUpload) { ?>

    /**
     * We can upload images and files to this model, so we need our helper trait.
     */
    use UploadTrait;
<?php } ?>
<?php if ($generator->haveType(\andrej2013\yiiboilerplate\templates\crud\Generator::TYPE_QR_CODE)) { ?>
    use QrTrait;
<?php } ?>
<?php if ($generator->haveType(\andrej2013\yiiboilerplate\templates\crud\Generator::TYPE_GOOGLE_MAP)) { ?>
    use GoogleMapTrait;
<?php } ?>

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '<?= $tableName ?>';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [<?= "\n            " . implode(",\n            ", $rules) . "\n        " ?>];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
<?php foreach ($labels as $name => $label) { ?>
            <?= "'$name' => " . $generator->generateString($label) . ",\n" ?>
<?php } ?>
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributePlaceholders()
    {
        return [
<?php foreach ($placeholders as $name => $placeholder) { ?>
            <?= "'$name' => " . $generator->generateString($placeholder) . ",\n" ?>
<?php } ?>
<?php if ($generator->getTableComment()->attachment) { ?>
            'attachments'   => <?= $generator->generateString('Attachments') ?>,
<?php } ?>
        ];
    }


    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return [
<?php foreach ($hints as $name => $hint) { ?>
            <?= "'$name' => " . $generator->generateString($hint) . ",\n" ?>
<?php } ?>
        ];
    }

<?php if ($generator->checkJunctionTable($tableSchema)) { ?>
    /**
     * Behaviors
     */
    public function behaviors()
    {
        $behaviors = parent::behaviors();
        unset($behaviors['arhistory']);
        unset($behaviors['SoftDelete']);
        return $behaviors;
    }

<?php } ?>
<?php if ($generator->getTableComment()->attachment) { ?>
    /**
     * Behaviors
     */
    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['fileBehavior'] = [
            'class' => \andrej2013\yiiboilerplate\behaviors\FileBehavior::class,
        ];
        return $behaviors;
    }
<?php } ?>
    /**
     * Auto generated method, that returns a human-readable name as string
     * for this model. This string can be called in foreign dropdown-fields or
     * foreign index-views as a representative value for the current instance.
     * @return String
     */
    public function toString()
    {
        return $this-><?=$generator->toStringAttribute($tableSchema) ?>; // this attribute can be modified
    }


    /**
     * Getter for toString() function
     * @return String
     */
    public function getToString()
    {
        return $this->toString();
    }

    /**
     * @inheritdoc
     */
    public function extraFields()
    {
        return [
<?php foreach ($relations as $name => $relation) { ?>
            '<?= lcfirst($name) ?>',
<?php } ?>
        ];
    }
<?php foreach ($relations as $name => $relation) { ?>

    /**
     * @return \yii\db\ActiveQuery
     */
    public function get<?= $name ?>()
    {
        <?= $relation[0] . "\n" ?>
    }
    
<?php
    $db = Yii::$app->getDb();
    $foreignClass = $ns . '\\' . $relation[1];
    if (class_exists($foreignClass)) {
    ?>

    public static function <?= lcfirst($name) ?>List($q = null)
    {
        return \<?= $ns ?>\<?= $relation[1] ?>::filter($q);
    }
<?php } ?>
<?php } ?>
<?php if (!empty($uploadedFields)) { ?>

    /**
     * Load data into object
     * @param array $data
     * @param null $formName
     * @return bool
     */
    public function load($data, $formName = null)
    {
        $scope = $formName === null ? $this->formName() : $formName;
        // Don't update these fields as they are handled separately.
    <?php foreach ($uploadedFields as $uploadedField) { ?>
        <?= "unset(\$data[\$scope]['$uploadedField']);\n" ?>
    <?php } ?>
        return parent::load($data);
    }
<?php } ?>

    /**
     * User for filtering results for Select2 element
     * @param null $q
     * @return array
     */
    public static function filter($q = null)
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $out = ['results' => ['id' => '', 'text' => '']];
        if (!is_null($q)) {
            $query = new \yii\db\Query();
            $query->select(['id', 'text' => '<?= $generator->toStringAttribute($tableSchema) ?>'])
                  ->from(self::tableName())
                  ->andWhere([self::tableName() . '.deleted_at' => null])
                  ->andWhere(['like', '<?= $generator->toStringAttribute($tableSchema) ?>', $q])
                  ->limit(20);
            $command = $query->createCommand();
            $data = $command->queryAll();
            $out['results'] = array_values($data);
        }
        return $out;
    }

    /**
     * @param $q
     * @return array
     */
    public static function selectSearch($q)
    {
        $out = [];
        $data = static::find()
                      ->select(['id', 'text' => '<?= $generator->toStringAttribute($tableSchema) ?>'])
                      ->andWhere(['LIKE', '<?= $generator->toStringAttribute($tableSchema) ?>', $q])
                      ->distinct()
                      ->orderBy('id')
                      ->asArray()
                      ->all();
        foreach ($data as $d) {
            $out['results'][] = $d;
        }
        return $out;
    }

}
