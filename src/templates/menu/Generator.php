<?php
/**
 * Copyright (c) 2017.
 * @author Nikola Tesic (nikolatesic@gmail.com)
 */

namespace andrej2013\yiiboilerplate\templates\menu;

use Yii;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;
use yii\db\BaseActiveRecord;
use yii\gii\CodeFile;
use yii\helpers\FileHelper;
use yii\helpers\Inflector;
use yii\db\Schema;
use schmunk42\giiant\generators\model\Generator as BaseGenerator;

/**
 * This generator will generate one or multiple ActiveRecord classes for the specified database table.
 *
 * @author Tobias Munk <schmunk@usrbin.de>
 * @since 0.0.1
 */
class Generator extends \yii\gii\Generator
{

    /**
     * @var array List of controllers that will be used for menu items
     */
    public $controllers = [];

    /**
     * @var string
     */
    public $menuPath = '@app/modules/backend/views/layouts';

    /**
     * @inheritdoc
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        // Preselect all controllers by default
        if (empty($this->controllers)) {
            $this->controllers = self::getControllers();
        }
    }

    /**
     * @return array
     */
    public function rules()
    {
        return array_merge(parent::rules(), [
            [['menuPath', 'controllers'], 'required'],
        ]);
    }
    /**
     * @return string
     */
    public function getName()
    {
        return 'Giiant Menu';
    }

    /**
     * @return string
     */
    public function getDescription()
    {
        return 'This generator generates menu items';
    }

    /**
     * @return array
     */
    public function attributeLabels()
    {
        return array_merge(parent::attributeLabels(), [
            'controllers' => 'Controllers',
            'menuPath' => 'Menu Path',
        ]);
    }

    /**
     * @return array
     */
    public function hints()
    {
        return array_merge(parent::hints(), [
            'controllers' => 'This are controllers that will be added as menu endpoints.',
            'menuPath' => 'Specify the directory for storing the sidebar menu file. You may use path alias here, e.g.,
                <code>/var/www/basic/app/modules/backend/views/layouts</code>, <code>@app/modules/backend/views/layouts</code>. If not set, it will default
                to <code>@app/modules/backend/views/layouts</code>',
        ]);
    }

    /**
     * @return string the menu path
     */
    public function getMenuPath()
    {
        if (empty($this->menuPath)) {
            return Yii::getAlias('@app/modules/backend/views/layouts');
        } else {
            return Yii::getAlias($this->menuPath);
        }
    }


    /**
     * @inheritdoc
     */
    public function requiredTemplates()
    {
        return [
            '_sidebar.php',
        ];
    }

    /**
     * @inheritdoc
     */
    public function stickyAttributes()
    {
        return array_merge(parent::stickyAttributes(), ['menuPath']);
    }

    /**
     * @inheritdoc
     */
    public function generate()
    {
        $menu = $this->getMenuPath() . '/_sidebar.php';
        $files = [
            new CodeFile($menu, $this->render("_sidebar.php")),
        ];
        return $files;
    }

    /**
     * @param $controller
     * @return mixed|string
     */
    public function getUrl($controller)
    {
        $controller = str_replace('Controller', '', $controller);
        $controller = Inflector::camel2id($controller);
        return $controller;
    }

    /**
     * @param $controller
     * @return mixed|string
     */
    public function getMenuName($controller)
    {
        $controller = str_replace('Controller', '', $controller);
        $controller = Inflector::camel2words($controller);
        return $controller;
    }

    /**
     * @return array
     */
    public static function getControllers()
    {
        $files = FileHelper::findFiles(Yii::getAlias('@app/controllers'), ['recurrsive' => false]);
        $out = [];
        foreach ($files as $file) {
            $out[pathinfo($file, PATHINFO_FILENAME)] = pathinfo($file, PATHINFO_FILENAME);
        }
        unset($out['SiteController']);
        unset($out['UserController']);
        return $out;
    }

    /**
     * @param $table
     * @return string
     */
    public static function table2Controller($table)
    {
        $controller = Inflector::camelize($table);
        return $controller . 'Controller';
    }

}
