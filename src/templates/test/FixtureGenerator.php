<?php
/**
 * Copyright (c) 2017.
 * @author Nikola Tesic (nikolatesic@gmail.com)
 */

namespace andrej2013\yiiboilerplate\templates\test;

use Yii;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;
use yii\db\BaseActiveRecord;
use yii\gii\CodeFile;
use yii\helpers\Inflector;

/**
 * This generator will generate one or multiple ActiveRecord classes for the specified database table.
 *
 * @author Tobias Munk <schmunk@usrbin.de>
 * @since 0.0.1
 */
class FixtureGenerator extends Generator
{
    public $modelPath = '@app/models';
    public $testPath = '@root/tests/codeception';

    /**
     * @var int How much models will be created for fixture data
     */
    protected $generatedFixtures;

    /**
     * @inheritdoc
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->generatedFixtures = getenv('TEST_GENERATED_FIXTURES') ? getenv('TEST_GENERATED_FIXTURES') : 4;
    }

    /**
     * @return string
     */
    public function getName()
    {
        return 'Giiant Fixture';
    }

    /**
     * @return string
     */
    public function getDescription()
    {
        return 'This generator generates Codeception test fixtures';
    }

    /**
     * @return array
     */
    public function rules()
    {
        return [
            [['modelPath'], 'filter', 'filter' => 'trim'],
            [['modelPath', 'testPath'], 'required'],
        ];
    }

    /**
     * @return array
     */
    public function attributeLabels()
    {
        return array_merge(parent::attributeLabels(), [
            'modelPath' => 'Model Path',
        ]);
    }

    /**
     * @return array
     */
    public function hints()
    {
        return array_merge(parent::hints(), [
            'modelPath' => 'Specify the directory where models are located. You may use path alias here, e.g.,
                <code>/var/www/basic/src/models</code>, <code>@app/models</code>. If not set, it will default
                to <code>@app/models</code>',
        ]);
    }

    /**
     * @return string the model path
     */
    public function getModelPath()
    {
        //@TODO make sure there is @root alias registered
        if (empty($this->modelPath)) {
            return Yii::getAlias('@app/models');
        } else {
            return Yii::getAlias($this->modelPath);
        }
    }

    /**
     * @inheritdoc
     */
    public function requiredTemplates()
    {
        return [
            'fixtures/fixtures.php',
            'fixtures/data/data.php',
        ];
    }

    /**
     * @inheritdoc
     */
    public function stickyAttributes()
    {
        return array_merge(parent::stickyAttributes(), ['testPath', 'modelPath']);
    }

    /**
     * @inheritdoc
     */
    public function generate()
    {
        $files = [];
        $baseModelPath = $this->getModelPath() . '/base';
        foreach (scandir($baseModelPath) as $file) {
            if (is_file($baseModelPath . '/' . $file) && pathinfo($file, PATHINFO_EXTENSION) === 'php') {
                $this->modelClass = $this->getClassFromFile($baseModelPath . '/' . $file);
                $class = new $this->modelClass;
                if ($class instanceof ActiveRecord) {
                    $fixtureData = $this->getTestPath() . '/fixtures/data/' . $this->getTableSchema()->name . '.php';
                    $fixture = $this->getTestPath() . '/fixtures/' . $this->getModelShortName() . 'Fixtures.php';
                    $files[] = new CodeFile($fixtureData, $this->render("fixtures/data/data.php"));
                    $files[] = new CodeFile($fixture, $this->render("fixtures/fixtures.php"));
                }
            }
        }
        return $files;
    }

    /**
     * Returns the view file for the input form of the generator.
     * The default implementation will return the "form.php" file under the directory
     * that contains the generator class file.
     * @return string the view file for the input form of the generator.
     */
    public function formView()
    {
        $class = new \ReflectionClass($this);

        return dirname($class->getFileName()) . '/formFixtures.php';
    }

    /**
     * @param $file
     * @return string return full qualified Class name with namespace from file
     */
    protected function getClassFromFile($file)
    {
        //Grab the contents of the file
        $contents = file_get_contents($file);

        //Start with a blank namespace and class
        $namespace = $class = "";

        //Set helper values to know that we have found the namespace/class token and need to collect the string values after them
        $getting_namespace = $getting_class = false;

        //Go through each token and evaluate it as necessary
        foreach (token_get_all($contents) as $token) {
            //If this token is the namespace declaring, then flag that the next tokens will be the namespace name
            if (is_array($token) && $token[0] == T_NAMESPACE) {
                $getting_namespace = true;
            }

            //If this token is the class declaring, then flag that the next tokens will be the class name
            if (is_array($token) && $token[0] == T_CLASS) {
                $getting_class = true;
            }

            //While we're grabbing the namespace name...
            if ($getting_namespace === true) {
                //If the token is a string or the namespace separator...
                if (is_array($token) && in_array($token[0], [T_STRING, T_NS_SEPARATOR])) {
                    //Append the token's value to the name of the namespace
                    $namespace .= $token[1];
                } elseif ($token === ';') {
                    //If the token is the semicolon, then we're done with the namespace declaration
                    $getting_namespace = false;
                }
            }

            //While we're grabbing the class name...
            if ($getting_class === true) {
                //If the token is a string, it's the name of the class
                if (is_array($token) && $token[0] == T_STRING) {
                    //Store the token's value as the class name
                    $class = $token[1];

                    //Got what we need, stope here
                    break;
                }
            }
        }

        //Build the fully-qualified class name and return it
        return $namespace ? $namespace . '\\' . $class : $class;
    }
}
