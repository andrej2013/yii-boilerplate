<?php
/**
 * Created by PhpStorm.
 * User: ntesic
 * Date: 2/19/19
 * Time: 11:54 PM
 */

namespace andrej2013\yiiboilerplate\templates\crud\providers;

use yii\db\ActiveRecord;
use andrej2013\yiiboilerplate\templates\crud\Generator;
use andrej2013\yiiboilerplate\templates\crud\providers\base\Provider;

class UploadProvider extends Provider
{
    public $type = Generator::TYPE_UPLOAD;

    public $widget = '\\andrej2013\\yiiboilerplate\\widget\\FileInput';

    /**
     * @param $attribute
     */
    public function activeField($attribute)
    {
        if ($this->condition($attribute)) {
            $tableSchema = $this->generator->getTableSchema();
            $column = $tableSchema->columns[$attribute];
            $comment = $this->generator->getComment($column);

            $limitation = [];
            if ($comment->fileSize) {
                $options['maxFileSize'] = $comment->fileSize;
            }
            if ($comment->allowedExtensions && is_array($comment->allowedExtensions)) {
                $options['allowedExtensions'] = $comment->allowedExtensions;
            }
            $options = [
                'pluginOptions' => [
                    'required'               => $column->allowNull ? false : true,
                    'initialPreview'         => "\$model->$attribute === null ? '' : \$model->getFileUrl('$attribute')",
                    'initialCaption'         => "\$model->$attribute",
                    'initialPreviewAsData'   => true,
                    'initialPreviewFileType' => "\$model->getFileType('$attribute')",
                    'fileActionSettings'     => [
                        'indicatorNew'      => "\$model->$attribute === null ? '' : Html::a(Html::tag('i', ['class' => 'fa fa-hand-down text-warning']), \$model->getFileUrl('$attribute'), ['target' => '_blank'])",
                        'indicatorNewTitle' => "\\Yii::t('app','Download')",
                    ],
                    'overwriteInitial'       => true,
                ],
                'options'       => [
                    'id' => "Html::getInputId(\$model, '$attribute') . \$caller_id",
                ],
                'pluginEvents'  => [
                    'fileclear' => 'new \yii\web\JsExpression(\'function() { var prev = $("input[name=\\\'" + $(this).attr("name") + "\\\']")[0]; $(prev).val(-1); }\')',
                ],
            ];
            $options = $this->generator->var_export54($options);
            $method = __METHOD__;
            $html = <<<HTML

/*Generated by $method*/
\$form->field(
    \$model,
    '$attribute',
    [
        'selectors' => [
            'input' => '#'.Html::getInputId(\$model, '$attribute') . \$caller_id,
        ]
    ]
)->widget({$this->widget}::class,
    $options
    )
    ->hint(\$model->getAttributeHint('$attribute'));
HTML;
            return $html;
        }
    }

    /**
     * @param $attribute
     */
    public function attributeFormat($attribute)
    {
        $method = __METHOD__;
        if ($this->condition($attribute)) {
            $options = [
                'attribute' => "'$attribute'",
                'format'    => "'raw'",
                'value'     => "function (\$model) { 
                    return {$this->widget}::widget(" . $this->generator->var_export54([
                        'id'            => "'$attribute" . "_preview_' . \$model->id",
                        'name'          => "'$attribute" . "_preview_' . \$model->id",
                        'model'         => "\$model",
                        'options'       => [
                            // Options of the Kartik's FileInput widget
                            'multiple'    => false, // If you want to allow multiple upload, default to false
                            'showMessage' => false,
                            //            'accept' => 'image/jpg'
                        ],
                        'pluginOptions' => [
                            'dropZoneEnabled'          => false,
                            'initialPreview'           => [
                                "\$model->$attribute === null ? null : \$model->getFileUrl('$attribute')",
                            ],
                            'initialCaption'           => "\$model->$attribute",
                            'initialPreviewFileType'   => "\$model->getFileType('$attribute')",
                            'initialPreviewShowDelete' => false,
                            // Plugin options of the Kartik's FileInput widget
                            //                                'theme'                    => 'explorer',
                            'showCaption'              => false,
                            'showUpload'               => false,
                            'showRemove'               => false,
                            'showDelete'               => false,
                            'showBrowse'               => false,
                            'fileActionSettings'       => [
                                'showDrag'     => false,
                                'showRemove'   => false,
                                'showDownload' => true,
                                'showZoom'     => true,
                            ],
                            'showClose'                => false,
                            'maxFileCount'             => 9999, // Client max files
                            'overwriteInitial'         => false,
                            'previewFileType'          => "'any'",
                            'allowedPreviewTypes'      => ["'image'", "'html'", "'text'", "'video'", "'audio'", "'flash'", "'object'"],
                            'initialPreviewAsData'     => true,
                            'purifyHtml'               => true,
                            'preferIconicPreview'      => false,
                            'previewFileIcon'          => "'<i class=\"fa fa-file\"></i>'",
                            'previewSettings'          => [
                                'pdf'    => [
                                    'height' => "'200px'",
                                ],
                                'office' => [
                                    'height' => "'200px'",
                                ],
                                'image'  => [
                                    'height' => "'200px'",
                                ],
                            ],
                            'previewFileIconSettings'  => [
                                'jpg' => "'<i class=\"fa fa-file-photo-o text-danger\"></i>'",
                                'pdf' => "'<i class=\"fa fa-file-pdf-o text-danger\"></i>'",
                                'png' => "'<i class=\"fa fa-file-photo-o text-primary\"></i>'",
                                'gif' => "'<i class=\"fa fa-file-photo-o text-muted\"></i>'",
                                'xls' => "'<i class=\"fa fa-file-excel-o text-success\"></i>'",
                                'doc' => "'<i class=\"fa fa-file-word-o text-primary\"></i>'",
                                'zip' => "'<i class=\"fa fa-file-archive-o text-muted\"></i>'",
                                'txt' => "'<i class=\"fa fa-file-text-o text-info\"></i>'",
                                'htm' => "'<i class=\"fa fa-file-code-o text-info\"></i>'",
                            ],
                            'previewFileExtSettings'   => [
                                'doc' => " new \yii\web\JsExpression('function(ext) {
                    return ext.match(/(doc|docx)$/i);
                }')",
                                'xls' => "new \yii\web\JsExpression('function(ext) {
                    return ext.match(/(xls|xlsx)$/i);
                }')",
                                'zip' => "new \yii\web\JsExpression('function(ext) {
                    return ext.match(/(zip|rar|tar|gzip|gz|7z)$/i);
                }')",
                                'htm' => "new \yii\web\JsExpression('function(ext) {
                    return ext.match(/(htm|html)$/i);
                }')",
                                'txt' => "new \yii\web\JsExpression('function(ext) {
                    return ext.match(/(txt|ini|csv|java|php|js|css)$/i);
                }')",
                            ],
                        ],
                    ]) . ");
                },",
            ];
            $html = $this->generator->var_export54($options);
            return <<<HTML
/*Generated by $method*/
$html
HTML;

        }
    }
}