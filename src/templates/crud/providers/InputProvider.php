<?php
/**
 * Created by PhpStorm.
 * User: ntesic
 * Date: 2/20/19
 * Time: 10:25 PM
 */

namespace andrej2013\yiiboilerplate\templates\crud\providers;

use andrej2013\yiiboilerplate\templates\crud\Generator;
use andrej2013\yiiboilerplate\templates\crud\providers\base\Provider;
use yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;

class InputProvider extends Provider
{
    public $type = [
        Generator::TYPE_INPUT,
        Generator::TYPE_EMAIL,
        Generator::TYPE_NUMBER,
        Generator::TYPE_PHONE,
        Generator::TYPE_URL,
        Generator::TYPE_PASSWORD,
        Generator::TYPE_TEXT,
    ];

    public function activeField($attribute)
    {
        if ($this->condition($attribute)) {
            /**
             * @var \yii\db\ColumnSchema $column
             */
            $column = $this->generator->getColumnByAttribute($attribute);
            $comment = $this->generator->getComment($column);
            $type = $this->generator->getAttributeType($attribute);
            $options = [
                'id'          => "Html::getInputId(\$model, '$attribute') . \$caller_id",
                'placeholder' => "\$model->getAttributePlaceholder('$attribute')",
            ];
            if ($column->size) {
                $options['maxlenght'] = $column->size;
            }
            $input = "textInput";
            switch ($type) {
                case Generator::TYPE_EMAIL:
                    $options += [
                        'type' => "'email'",
                    ];
                    break;
                case Generator::TYPE_PHONE:
                    $options += [
                        'type' => "'tel'",
                    ];
                    if ($comment->pattern) {
                        $options['pattern'] = "'$comment->pattern'";
                    }
                    break;
                case Generator::TYPE_URL:
                    $options += [
                        'type' => "'url'",
                    ];
                    break;
                case Generator::TYPE_PASSWORD:
                    $input = "passwordInput";
                    break;
                case Generator::TYPE_NUMBER:
                    $options += [
                        'type' => "'number'",
                        'step' => $column->phpType === 'double' ? "'{$column->precision}'" : 1,
                    ];
                    if ($column->unsigned) {
                        $options['min'] = 0;
                    }
                    if ($comment->min) {
                        $options['min'] = $comment->min;
                    }
                    if ($comment->max) {
                        $options['max'] = $comment->max;
                    }
                    unset($options['maxlenght']);
                    break;
                case Generator::TYPE_TEXT:
                    $input = "textarea";
                    $options += [
                        'rows' => 6,
                    ];
                    break;
                case Generator::TYPE_INPUT:
                default:
            }
            $method = __METHOD__;
            $options = $this->generator->var_export54($options);
            $html = <<<HTML
/*Generated by $method*/
\$form->field(
    \$model,
    '{$attribute}',
    [
        'selectors' => [
            'input' => '#'.Html::getInputId(\$model, '$attribute') . \$caller_id,
        ]
    ]
    )
     ->$input($options)
    ->hint(\$model->getAttributeHint('$attribute'));
HTML;
            return $html;
        }
    }

    public function columnFormat($attribute, ActiveRecord $model)
    {
        $this->type = ArrayHelper::merge($this->type, [
            Generator::TYPE_QR_CODE,
            Generator::TYPE_GOOGLE_MAP,
            Generator::TYPE_COLOR_PICKER,
            Generator::TYPE_HTML_EDITOR,
            Generator::TYPE_UPLOAD,
        ]);
        if ($this->condition($attribute)) {
            $column = $this->generator->getColumnByAttribute($attribute);
            $route = $this->generator->createRoute('typehead');
            if ($column->type == 'string' || $column->type == 'text') {
                $method = __METHOD__;
                $options = [
                    'class'               => '\kartik\grid\DataColumn::class',
                    'attribute'           => "'$attribute'",
                    'format'              => "'html'",
                    'filterType'          => "GridView::FILTER_TYPEAHEAD",
                    'filterWidgetOptions' => [
                        //                        'pjaxContainerId' => 'employee-pjax-container',
                        'pluginOptions' => [
                            'highlight' => true,
                        ],
                        'options'       => [
                            'placeholder'  => $this->generator->generateString('Filter as you type') . " . ' ...'",
                            'autocomplete' => "'off'",
                        ],
                        'dataset'       => [
                            [
                                'datumTokenizer' => "'Bloodhound.tokenizers.obj.whitespace(\"value\")'",
                                'display'        => "'value'",
                                'remote'         => [
                                    'url'      => "Url::to(['$route', 'attribute' => '$attribute']) . '&q=%QUERY'",
                                    'wildcard' => "'%QUERY'",
                                ],
                                'templates'      => [
                                    'notFound' => "'<div class=\"text-danger\" style=\"padding:0 8px\">'." . $this->generator->generateString('No results') . ".'</div>'",
                                ],
                            ],
                        ],
                    ],
                ];
                $html = $this->generator->var_export54($options);
                return <<<HTML
/*Generated by $method*/
$html
HTML;

            }
        }
    }
}