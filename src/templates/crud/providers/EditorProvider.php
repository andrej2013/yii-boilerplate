<?php
/**
 * Created by PhpStorm.
 * User: tobias
 * Date: 14.03.14
 * Time: 10:21.
 */
namespace andrej2013\yiiboilerplate\templates\crud\providers;

use andrej2013\yiiboilerplate\templates\crud\Generator;
use andrej2013\yiiboilerplate\templates\crud\providers\base\Provider;

class EditorProvider extends Provider
{
    public $type = Generator::TYPE_HTML_EDITOR;

    public $widget  = 'ckeditor';
    public $widgets = [];

    /**
     * @param $attribute
     * @return string|void
     */
    public function activeField($attribute)
    {
        if ($this->condition($attribute)) {
            $column = $this->generator->getTableSchema()->columns[$attribute];
            $comment = $this->generator->getComment($column);
            $method = __METHOD__;
            if (isset($this->widgets[$column->name])) {
                $this->widget = $this->widgets[$column->name];
            }

            switch ($this->widget) {
                case 'redactor':
                    $this->generator->requires[] = 'yiidoc/yii2-redactor';

                    return "\$form->field(\$model, '{$attribute}')->widget(\\yii\\redactor\\widgets\\Redactor::className())";
                    break;
                case 'aceHTML':
                    $this->generator->requires[] = 'trntv/aceeditor';

                    return "\$form->field(\$model, '{$attribute}')->widget(\\trntv\\aceeditor\\AceEditor::className(), ['mode' => 'html', 'theme' => 'twilight'])";
                    break;
                case 'aceLESS':
                    $this->generator->requires[] = 'trntv/aceeditor';

                    return "\$form->field(\$model, '{$attribute}')->widget(\\trntv\\aceeditor\\AceEditor::className(), ['mode' => 'less', 'theme' => 'twilight'])";
                    break;
                case 'aceJS':
                    $this->generator->requires[] = 'trntv/aceeditor';

                    return "\$form->field(\$model, '{$attribute}')->widget(\\trntv\\aceeditor\\AceEditor::className(), ['mode' => 'javascript', 'theme' => 'twilight'])";
                    break;
                case 'ckeditor':
                default:
                    $this->generator->requires[] = 'mihaildev/yii2-ckeditor';
                    $toolset = 'standard';
                    if ($comment->toolset) {
                        $toolset = $comment->toolset;
                    }
                    $options = [
                        'id'            => "Html::getInputId(\$model, '$attribute') . \$caller_id",
                        'editorOptions' => "\\mihaildev\\elfinder\\ElFinder::ckeditorOptions('elfinder-backend', " . $this->generator->var_export54([
                                'height' => "'300'",
                                'preset' => "'$toolset'",
                            ]) . ")",
                    ];
                    $options = $this->generator->var_export54($options);
                    $html = <<<HTML
/*Generated by $method*/
\$form->field(
    \$model,
    '{$attribute}',
    [
        'selectors' => [
            'input' => '#'.Html::getInputId(\$model, '$attribute') . \$caller_id,
        ]
    ]
    )
     ->widget(\\andrej2013\\yiiboilerplate\\widget\\CKEditor::class, $options
     )
    ->hint(\$model->getAttributeHint('$attribute'));
HTML;
                    return $html;
            }
        }
    }

    public function attributeFormat($attribute)
    {
        if ($this->condition($attribute)) {
            $options = [
                'attribute' => "'$attribute'",
                'format'    => "'raw'",
                'value'     => "function (\$model) {
                    return html_entity_decode(strlen(\$model->$attribute) > 500 ? (substr(\$model->$attribute, 0, 500) . '...') : \$model->$attribute);
        }",

            ];
            $method = __METHOD__;
            $html = $this->generator->var_export54($options);
            return <<<HTML
/*Generated by $method*/
$html
HTML;

        }
    }
}
