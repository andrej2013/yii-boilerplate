<?php

namespace andrej2013\yiiboilerplate\templates\crud\providers;

use andrej2013\yiiboilerplate\templates\crud\Generator;
use andrej2013\yiiboilerplate\templates\crud\providers\base\Provider;
use yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;

class DateProvider extends Provider
{
    public $type = [
        Generator::TYPE_DATE,
        Generator::TYPE_DATETIME,
    ];

    /**
     * @param $attribute
     * @return string|void
     */
    public function activeField($attribute)
    {
        if ($this->condition($attribute)) {
            $column = $this->generator->getColumnByAttribute($attribute);
            $options = [
                'id'      => "Html::getInputId(\$model, '$attribute') . \$caller_id",
                'options' => [
                    'pluginOptions' => [
                        'todayHighlight' => true,
                        'autoclose'      => true,
                        'class'          => "'form-control'",
                    ],
                ],
            ];
            switch ($this->generator->getAttributeType($attribute)) {
                case Generator::TYPE_DATE:
                    $options = ArrayHelper::merge($options, [
                        'type'    => '\\kartik\\datecontrol\\DateControl::FORMAT_DATE',
                        'options' => [
                            'type' => '\\kartik\\date\\DatePicker::TYPE_COMPONENT_APPEND',
                        ],
                    ]);
                    break;
                case Generator::TYPE_DATETIME:
                    $options = ArrayHelper::merge($options, [
                        'type'    => '\\kartik\\datecontrol\\DateControl::FORMAT_DATETIME',
                        'options' => [
                            'type'           => '\\kartik\\datetime\\DateTimePicker::TYPE_COMPONENT_APPEND',
                            'ajaxConversion' => true,
                            'pickerButton'   => [
                                'icon' => 'time',
                            ],
                        ],
                    ]);
                    break;
            }
            $options = $this->generator->var_export54($options);
            $method = __METHOD__;
            return <<<HTML
/*Generated by $method*/
\$form->field(
    \$model,
    '{$attribute}',
    [
        'selectors' => [
            'input' => '#'.Html::getInputId(\$model, '$attribute') . \$caller_id,
        ]
    ]
    )->widget(\\kartik\\datecontrol\\DateControl::class, $options)
    ->hint(\$model->getAttributeHint('$attribute'));
HTML;
        }
    }

    /**
     * Formatter for detail view attributes, who have get[..]ValueLabel function.
     * @param $attribute
     * @param $model ActiveRecord
     */
    public function columnFormat($attribute, $model)
    {
        if ($this->condition($attribute)) {
            $column = $this->generator->getColumnByAttribute($attribute);
            switch ($this->generator->getAttributeType($attribute)) {
                case Generator::TYPE_DATE:
                    $format = 'Yii::$app->formatter->momentJsDateFormat';
                    break;
                case Generator::TYPE_DATETIME:
                    $format = 'Yii::$app->formatter->momentJsDateTimeFormat';
                    break;
            }
            $format = $column->dbType == 'datetime' ? 'Yii::$app->formatter->momentJsDateTimeFormat' : 'Yii::$app->formatter->momentJsDateFormat';
            $options = [
                'attribute'           => "'$attribute'",
                'class'               => '\\kartik\\grid\\DataColumn::class',
                'content'             => "function (\$model) {
                    return \\Yii::\$app->formatter->as" . ucfirst($column->dbType) . "(\$model->$attribute);
                }",
                'format'              => "'{$column->dbType}'",
                'filterType'          => "GridView::FILTER_DATE_RANGE",
                'filterWidgetOptions' => [
                    'presetDropdown' => true,
                    'pluginEvents'   => [
                        'apply.daterangepicker'  => "'function(ev, picker) {
                            if($(this).val() == \"\") {
                                $(this).val(picker.startDate.format(picker.locale.format) + picker.locale.separator +
                                picker.endDate.format(picker.locale.format)).trigger(\"change\");
                            }
                        }'",
                        'show.daterangepicker'   => "'function(ev, picker) {
                            picker.container.find(\".ranges\").off(\"mouseenter.daterangepicker\", \"li\");
                            if($(this).val() == \"\") {
                                picker.container.find(\".ranges .active\").removeClass(\"active\");
                            }
                        }'",
                        'cancel.daterangepicker' => "'function(ev, picker) {
                            if($(this).val() != \"\") {
                                $(this).val(\"\").trigger(\"change\");
                            }
                        }'",
                    ],
                    'pluginOptions'  => [
                        'opens'  => 'left',
                        'locale' => [
                            'format'    => $format,
                            'separator' => ' TO ',
                        ],
                    ],
                ],
            ];
            $method = __METHOD__;
            $html = $this->generator->var_export54($options);
            return <<<HTML
/*Generated by $method*/
$html
HTML;
        }
    }

    public function attributeFormat($attribute)
    {
        if ($this->condition($attribute)) {
            $column = $this->generator->getColumnByAttribute($attribute);
            $format = $column->dbType;
            $method = __METHOD__;
            return "/*Generated by $method*/
            '$attribute:$format'";
        }
    }

}