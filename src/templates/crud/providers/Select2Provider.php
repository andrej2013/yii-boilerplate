<?php
/**
 * Created by PhpStorm.
 * User: ntesic
 * Date: 2/20/19
 * Time: 2:28 PM
 */

namespace andrej2013\yiiboilerplate\templates\crud\providers;

use yii\db\ActiveRecord;
use andrej2013\yiiboilerplate\templates\crud\Generator;
use andrej2013\yiiboilerplate\templates\crud\providers\base\Provider;
use andrej2013\yiiboilerplate\templates\model\Generator as ModelGenerator;
use yii\helpers\ArrayHelper;

class Select2Provider extends Provider
{
    public $type = Generator::TYPE_SELECT2;

    public function activeField($attribute)
    {
        if ($this->condition($attribute)) {
            $method = __METHOD__;
            $column = $this->generator->getColumnByAttribute($attribute);
            $relation = $this->generator->getRelationByColumn($this->generator->modelClass, $column);
            if ($relation->multiple) {
                //@TODO
                return;
            }
            $route = '/' . $this->generator->createRelationRoute($relation, '');
            $serach_route = $this->generator->createRelationRoute($relation, 'select-search');
            $model = $relation->modelClass;
            $primary_key = $relation->primaryModel::primaryKey()[0];
            $shortName = (new \ReflectionClass($model))->getShortName();
            $options = [
                'data'          => "$model::find()->count() > 50 ? null : ArrayHelper::map($model::find()->all(), 'id', 'toString')",
                'initValueText' => "$model::find()->count() > 50 ? \\yii\\helpers\\ArrayHelper::map($model::find()->andWhere(['id' => \$model->{$attribute}])->all(), 'id', 'toString') : ''",
                'options'       => [
                    'placeholder' => $this->generator->generateString('Select a value...'),
                    'id'          => "'$attribute' . (\$is_popup ? '_from' . \$caller_id : '')",
                ],
                'pluginOptions' => [
                    'allowClear'         => $column->allowNull ? true : false,
                    'minimumInputLength' => "$model::find()->count() > 50 ? 3 : false",
                    'ajax'               => "$model::find()->count() > 50 ? " . $this->generator->var_export54([
                            'url'      => "\\yii\\helpers\\Url::to(['$serach_route'])",
                            'dataType' => "'json'",
                            'data'     => "new \\yii\\web\\JsExpression('function(params) {
                            return {
                                q:params.term
                            };
                        }')",
                        ]) . " : null",
                ],
                'is_popup'      => '$is_popup',
                'addon'         => [
                    'append' => [
                        'content'  => [
                            "RelatedForms::widget(" . $this->generator->var_export54([
                                'relatedController' => "'$route'",
                                'selector'          => "'$attribute' . (\$is_popup ? '_popup_' . \$caller_id : '')",
                                'primaryKey'        => "'$primary_key'",
                                'modelName'         => $this->generator->generateString($shortName),
                            ]) . ")",
                        ],
                        'asButton' => true,
                    ],
                ],
            ];
            $options = $this->generator->var_export54($options);
            $hidden_options = [
                'id'          => "'$attribute' . (\$is_popup ? '_from' . \$caller_id : '')",
            ];
            $hidden_options = $this->generator->var_export54($hidden_options);
            $html = <<<HTML
/*Generated by $method*/
(isset(\$hide) && \$hide === '$attribute') ? 
Html::activeHiddenInput(
    \$model,
    '$attribute',
    $hidden_options
)
:
\$form->field(\$model, '$attribute')
        ->widget(Select2::class, $options);
HTML;
            return $html;

        }
    }

    public function attributeFormat($attribute)
    {
        $this->type = [
            Generator::TYPE_SELECT2,
            Generator::TYPE_DEPEND,
        ];
        if ($this->condition($attribute)) {
            $column = $this->generator->getColumnByAttribute($attribute);
            $relation = $this->generator->getRelationByColumn($this->generator->modelClass, $column);
            if ($relation->multiple) {
                //@TODO
                return;
            }
            $title = $this->generator->getModelNameAttribute($relation->modelClass);
            $route = $this->generator->createRelationRoute($relation, 'view');
            $modelClass = $this->generator->modelClass;
            $relationGetter = 'get' . (new ModelGenerator())->generateRelationName([$relation], $modelClass::getTableSchema(), $column->name, $relation->multiple) . '()';
            $relationModel = new $relation->modelClass();
            $pks = $relationModel->primaryKey();
            $paramArrayItems = '';
            foreach ($pks as $attr) {
                $paramArrayItems .= "'{$attr}' => \$model->{$relationGetter}->one()->{$attr},";
            }
            $aclID = $this->generator->createRelationPermission($relation, 'view');

            $method = __METHOD__;
            return <<<HTML
                /*Generated by {$method}*/
                [
                    'format' => 'html',
                    'attribute' => '$column->name',
                    'value' => function (\$model) {
                        \$foreign = \$model->{$relationGetter}->one();
                        if (\$foreign) {
                            if (Yii::\$app->getUser()->can('app_{$aclID}') && \$foreign->readable()) {
                                return Html::a(\$foreign->toString, [
                                    '{$route}',
                                    {$paramArrayItems}
                                ]);
                            }
                            return \$foreign->toString;
                        }
                        return '<span class="label label-warning">?</span>';
                    },
                ]
HTML;
        }
    }

    public function columnFormat($attribute, ActiveRecord $model)
    {
        $this->type = [
            Generator::TYPE_SELECT2,
            Generator::TYPE_DEPEND,
        ];
        if ($this->condition($attribute)) {
            $method = __METHOD__;
            $column = $this->generator->getColumnByAttribute($attribute);
            $relation = $this->generator->getRelationByColumn($this->generator->modelClass, $column);
            if ($relation->multiple) {
                return;
            }
            $method = __METHOD__;
            $modelName = $relation->modelClass;
            $route = $this->generator->createRelationRoute($relation, 'view');
            $modelClass = $this->generator->modelClass;
            $relationGetter = (new ModelGenerator())->generateRelationName([$relation], $modelClass::getTableSchema(), $column->name, $relation->multiple);
            $relationName = lcfirst($relationGetter);
            $aclID = $this->generator->createRelationPermission($relation, 'view');
            $options = [
                'class'               => '\kartik\grid\DataColumn::class',
                'attribute'           => "'$attribute'",
                'format'              => "'html'",
                'content'             => "function (\$model){
                    if (\$model->$relationName) {
                        if (Yii::\$app->getUser()->can('app_{$aclID}') && \$model->{$relationName}->readable()) {
                            return Html::a(\$model->{$relationName}->toString, ['{$route}', 'id' => \$model->$attribute]);
                        } else {
                            return \$model->{$relationName}->toString;
                        }
                    }
                }",
                'filterType'          => "GridView::FILTER_SELECT2",
                'filterWidgetOptions' => [
                    'data'          => "\\yii\\helpers\\ArrayHelper::map($modelName::find()->all(), 'id', 'toString')",
                    'options'       => [
                        'placeholder' => "''",
                        'multiple'    => true,
                    ],
                    'pluginOptions' => [
                        'allowClear' => true,
                    ],
                ],
            ];
            $html = $this->generator->var_export54($options);
            return <<<HTML
/*Generated by $method*/
$html
HTML;
        }
    }
}