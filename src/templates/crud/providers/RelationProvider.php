<?php
/**
 * Created by PhpStorm.
 * User: tobias
 * Date: 14.03.14
 * Time: 10:21.
 */
namespace andrej2013\yiiboilerplate\templates\crud\providers;

use schmunk42\giiant\generators\model\Generator as ModelGenerator;
use yii\db\ActiveRecord;
use yii\db\ColumnSchema;
use yii\helpers\Inflector;

class RelationProvider extends \schmunk42\giiant\base\Provider
{
    /**
     * @var null can be null (default) or `select2`
     */
    public $inputWidget = null;

    /**
     * @var bool wheter to skip non-existing columns in relation grid
     *
     * @since 0.6
     */
    public $skipVirtualAttributes = false;

    /**
     * Formatter for relation grid columns.
     *
     * Renders a link to the related detail view
     * @param $attribute
     * @param $model ActiveRecord
     * @return string|void
     */
    public function columnFormat($attribute, $model)
    {
        $column = $this->generator->getColumnByAttribute($attribute, $model);
        if (!$column) {
            return;
        }

        # handle columns with a primary key, to create links in pivot tables (changed at 0.3-dev; 03.02.2015)
        # TODO double check with primary keys not named `id` of non-pivot tables
        # TODO Note: condition does not apply in every case
        if ($column->isPrimaryKey) {
            #return null;
        }

        $relation = $this->generator->getRelationByColumn($model, $column);
        if ($relation) {
            if ($relation->multiple) {
                return;
            }
            $title = $this->generator->getModelNameAttribute($relation->modelClass);
            $route = $this->generator->createRelationRoute($relation, 'view');
            $method = __METHOD__;
            $modelClass = $this->generator->modelClass;
            $relationGetter = 'get' . (new ModelGenerator())->generateRelationName(
                    [$relation],
                    $modelClass::getTableSchema(),
                    $column->name,
                    $relation->multiple
                ) . '()';
            $relationModel = new $relation->modelClass();
            $pks = $relationModel->primaryKey();
            $paramArrayItems = '';

            foreach ($pks as $attr) {
                $paramArrayItems .= "'{$attr}' => \$rel->{$attr},";
            }

            $code = <<<EOS
                // generated by {$method}
                [
                    'class' => yii\\grid\\DataColumn::className(),
                    'attribute' => '{$column->name}',
                    'value' => function (\$model) {
                        if (\$rel = \$model->{$relationGetter}->one()) {
                            return Html::a(
                                \$rel->toString,
                                [
                                    '{$route}',
                                    {$paramArrayItems}
                                ],
                                [
                                   'data-pjax' => 0
                                ]
                            );
                        } else {
                            return '';
                        }
                    },
                    'format' => 'raw',
                ]
EOS;

            return $code;
        } else {
            return;
        }
    }

    /**
     * Renders a grid view for a given relation.
     *
     * @param $name
     * @param $relation
     * @param bool $showAllRecords
     *
     * @return mixed|string
     */
    public function relationGrid($name, $relation, $showAllRecords = false, $attachButton = null)
    {
        $model = new $relation->modelClass();

        // column counter
        $counter = 0;
        $columns = [];
        $generator = $this->generator;
        if (!$this->generator->isPivotRelation($relation)) {
            // hasMany relations
            $template = '{view} {update}';
            $deleteButtonPivot = '';
        } else {
            // manyMany relations
            $template = '{view} {delete}';
            $deleteButtonPivot = <<<EOS
'delete' => function (\$url, \$model) {
                            return Html::a(
                                '<span class="glyphicon glyphicon-remove"></span>',
                                \$url,
                                [
                                    'class' => 'text-danger',
                                    'title' => {$this->generator->generateString('Remove')},
                                    'data-confirm' => {$this->generator->generateString('Are you sure you want to delete the related item?')},
                                    'data-method' => 'post',
                                    'data-pjax' => '0',
                                ]
                            );
                        },
                        'view' => function (\$url, \$model) {
                            return Html::a(
                                '<span class="glyphicon glyphicon-cog"></span>',
                                \$url,
                                [
                                    'data-title'  => {$this->generator->generateString('View Pivot Record')},
                                    'data-toggle' => 'tooltip',
                                    'data-pjax'   => '0',
                                    'class'       => 'text-muted',
                                ]
                            );
                        },
EOS;
        }

        $reflection = new \ReflectionClass($relation->modelClass);
        $controller = $this->generator->pathPrefix . Inflector::camel2id($reflection->getShortName(), '-', true);
        $actionColumn = <<<EOS
                [
                    'class'     => {$this->generator->actionButtonClass},
                    'contentOptions' => [
                        'nowrap'    => 'nowrap'
                    ],
                    'urlCreator' => function (\$action, \$model, \$key, \$index) {
                        // using the column name as key, not mapping to 'id' like the standard generator
                        \$params = is_array(\$key) ? \$key : [\$model->primaryKey()[0] => (string) \$key];
                        \$params[0] = '$controller' . '/' . \$action;
                        return \$params;
                    },
                    'buttons' => [
                        $deleteButtonPivot
                    ],
                    'controller' => '$controller',
                    'updateOptions'  => [
                        'icon' => '<i class="fa fa-pencil"></i>',
                    ],
                    'deleteOptions'  => [
                        'icon' => '<i class="fa fa-trash"></i>',
                    ],
                    'viewOptions'    => [
                        'icon' => '<i class="fa fa-eye"></i>',
                    ],
                    'visibleButtons' => [
                        'view'   => function (\$model, \$key, \$index) {
                            return \$model->readable() && Yii::\$app->user->can(Yii::\$app->controller->module->id . '_' . Yii::\$app->controller->id . '_view');
                        },
                        'update' => function (\$model, \$key, \$index) {
                            return \$model->editable() && Yii::\$app->user->can(Yii::\$app->controller->module->id . '_' . Yii::\$app->controller->id . '_update');
                        },
                        'delete' => function (\$model, \$key, \$index) {
                            return \$model->deletable() && Yii::\$app->user->can(Yii::\$app->controller->module->id . '_' . Yii::\$app->controller->id . '_delete');
                        },
                    ],
                ]
EOS;

        // add action column

        // prepare grid column formatters
        $model->setScenario('crud');
        $safeAttributes = $model->safeAttributes();
        if (empty($safeAttributes)) {
            $safeAttributes = $model->getTableSchema()->columnNames;
        }
        $safeAttributes = array_diff($safeAttributes, $generator->hidden_attributes);
        foreach ($safeAttributes as $attr) {
            // max seven columns
            if ($counter > $this->generator->gridRelationMaxColumns) {
                continue;
            }
            // skip virtual attributes
            if ($this->skipVirtualAttributes && !isset($model->tableSchema->columns[$attr])) {
                continue;
            }
            // don't show current model
            if (key($relation->link) == $attr) {
                continue;
            }

            $code = $this->generator->columnFormat($attr, $model);
            if ($code == false) {
                continue;
            }
            $columns[] = $code;
            ++$counter;
        }
        if ($generator->generateViewActionButtons) {
            $columns[] = $actionColumn;
        }
        $columns = implode(", \n", $columns);
        $query = $showAllRecords ?
            "'query' => \\{$relation->modelClass}::find()" :
            "'query' => \$model->get{$name}()";
        $pageParam = Inflector::slug("page-{$name}");
        $list_all_label = $generator->generateString('List All');
        $relation_plural = $generator->generateString(Inflector::camel2words($label));
        $relation_route_index = $generator->createRelationRoute($relation, 'index');
        $new_label = $generator->generateString('New');
        $relation_single_label = $generator->generateString(Inflector::singularize(Inflector::camel2words($label)));
        $relation_route_create = $generator->createRelationRoute($relation, 'create');
        $relation_model_name = Inflector::singularize($modelName);
        $relation_key = key($relation->link);
        $model_primary_key = $model->primaryKey()[0];
        $code = '';
        $newButton = "Html::a('<span class=\"fa fa-plus\"></span> ' . $new_label . ' ' . $relation_single_label, [
                    '$relation_route_create',
                    '$relation_model_name' => [
                        '$relation_key' => \$model->$model_primary_key,
                    ],
                ], ['class' => 'btn', 'preset' => Html::PRESET_PRIMARY, 'data-pjax' => 0])";
        $newButton = $attachButton ?? $newButton;
        $code .= <<<EOS
GridView::widget([
            'layout' => '{summary}{pager}<br/>{items}{pager}',
            'dataProvider' => new \\yii\\data\\ActiveDataProvider(
                [
                    {$query},
                    'pagination' => [
                        'pageSize' => 20,
                        'pageParam' => '{$pageParam}',
                    ]
                ]
            ),
            'pager' => [
                'class'          => yii\widgets\LinkPager::className(),
                'firstPageLabel' => \\Yii::t('app', 'First'),
                'lastPageLabel'  => \\Yii::t('app', 'Last')
            ],
            'panel'        => [                
                'type'    => Yii::\$app->params['style']['primary_color'],
                'before'  => $newButton,
                'after'   => '{pager}',
                'footer'  => false,
            ],
            'export'       => false,
            'toggleData'   => false,
            'pjax' => true,
            'striped' => true,
            'hover' => true,
            'columns' => [
                $columns
            ]
        ])
EOS;

        return $code;
    }
}
