<?php

namespace andrej2013\yiiboilerplate\modules\backend\models\base;

use Yii;
use \app\models\ActiveRecord;
use yii\db\Query;

/**
 * This is the base-model class for table "grid_config".
 * - - - - - - - - -
 * Generated by the modified Giiant CRUD Generator
 *
 * @property integer          $id
 * @property integer          $user_id
 * @property string           $grid
 * @property string           $column
 * @property integer          $show
 * @property integer          $deleted_by
 * @property string           $deleted_at
 * @property integer          $created_by
 * @property string           $created_at
 * @property integer          $updated_by
 * @property string           $updated_at
 * @property string           $toString
 * @property string           $entryDetails
 *
 * @property \app\models\User $user
 */
class GridConfig extends ActiveRecord
{


    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'grid_config';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [
                ['user_id', 'grid', 'column'],
                'required',
            ],
            [
                ['user_id', 'show', 'deleted_by'],
                'integer',
            ],
            [
                ['deleted_at'],
                'safe',
            ],
            [
                ['grid', 'column'],
                'string',
                'max' => 255,
            ],
            [
                ['user_id', 'grid', 'column'],
                'unique',
                'targetAttribute' => [
                    'user_id',
                    'grid',
                    'column',
                ],
            ],
            [
                ['user_id'],
                'exist',
                'skipOnError'     => true,
                'targetClass'     => \app\models\User::class,
                'targetAttribute' => ['user_id' => 'id'],
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id'         => Yii::t('app', 'ID'),
            'user_id'    => Yii::t('app', 'User'),
            'grid'       => Yii::t('app', 'Grid'),
            'column'     => Yii::t('app', 'Column'),
            'show'       => Yii::t('app', 'Show'),
            'created_by' => Yii::t('app', 'Created By'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_by' => Yii::t('app', 'Updated By'),
            'updated_at' => Yii::t('app', 'Updated At'),
            'deleted_by' => Yii::t('app', 'Deleted By'),
            'deleted_at' => Yii::t('app', 'Deleted At'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributePlaceholders()
    {
        return [];
    }


    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return [];
    }

    /**
     * Auto generated method, that returns a human-readable name as string
     * for this model. This string can be called in foreign dropdown-fields or
     * foreign index-views as a representative value for the current instance.
     * @return String
     */
    public function toString()
    {
        return $this->grid; // this attribute can be modified
    }


    /**
     * Getter for toString() function
     * @return String
     */
    public function getToString()
    {
        return $this->toString();
    }

    /**
     * @inheritdoc
     */
    public function extraFields()
    {
        return [
            'user',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(\app\models\User::class, ['id' => 'user_id']);
    }


    public static function userList($q = null)
    {
        return \app\models\User::filter($q);
    }

    /**
     * User for filtering results for Select2 element
     * @param null $q
     * @return array
     */
    public static function filter($q = null)
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $out = ['results' => ['id' => '', 'text' => '']];
        if (! is_null($q)) {
            $query = new \yii\db\Query();
            $query->select(['id', 'text' => 'grid'])
                  ->from(self::tableName())
                  ->andWhere([self::tableName() . '.deleted_at' => null])
                  ->andWhere(['like', 'grid', $q])
                  ->limit(20);
            $command = $query->createCommand();
            $data = $command->queryAll();
            $out['results'] = array_values($data);
        }
        return $out;
    }
}
