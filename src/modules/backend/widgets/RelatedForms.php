<?php
/**
 * Copyright (c) 2017.
 * @author Nikola Tesic (nikolatesic@gmail.com)
 */

/**
 * Created by PhpStorm.
 * User: Nikola
 * Date: 3/21/2017
 * Time: 4:51 PM
 */

namespace andrej2013\yiiboilerplate\modules\backend\widgets;

use andrej2013\yiiboilerplate\modules\backend\assets\RelatedFormAsset;
use yii\base\InvalidConfigException;
use yii\base\Widget;
use kartik\helpers\Html;
use andrej2013\yiiboilerplate\widget\Modal;
use yii\helpers\Url;
use yii\web\View;

class RelatedForms extends Widget
{
    const TYPE_MODAL    = 'Modal';
    const ACTION_CREATE = 'plus';
    const ACTION_UPDATE = 'pencil';


    /**
     * @var string type of related widget, to show as modal or as tab
     */
    public $type;

    /**
     * @var string Controller url to where to made call to get related form
     */
    public $relatedController = null;

    /**
     * @var string action of related controller to be called, default "related-form"
     */
    public $relatedAction = 'related-form';

    /**
     * @var string Id of Select2 element from where call is coming
     */
    public $selector = null;

    /**
     * @var string Which button to render, for editing or for creating
     */
    public $action;

    /**
     * @var Primary key name of related model, used for sending in get request
     */
    public $primaryKey;

    public $depend;

    public $dependOn;

    public $relation;

    public $relationId;
    public $modelName;

    protected $url;

    public static $modalCreated = false;

    /**
     * @throws InvalidConfigException
     */
    public function init()
    {
        if (is_null($this->relatedController) || empty($this->relatedController)) {
            throw new InvalidConfigException('No related controller url specified for Related Widget.');
        }
        if (is_null($this->primaryKey) || empty($this->primaryKey)) {
            throw new InvalidConfigException('No related primary key specified for Related Widget.');
        }
        if (is_null($this->selector) || empty($this->selector)) {
            throw new InvalidConfigException('No selector specified for Related Widget.');
        }
        // Setting default type to modal if nothing provided
        if (is_null($this->type) || empty($this->type)) {
            $this->type = self::TYPE_MODAL;
        }
        $this->url = Url::toRoute([
            $this->relatedController . '/' . $this->relatedAction,
            'caller_id' => $this->selector,
        ]);
        parent::init(); // TODO: Change the autogenerated stub
        $this->registerAssets();
    }

    /**
     *
     */
    public function run()
    {
        parent::run(); // TODO: Change the autogenerated stub
        return // Render update icon
            \yii\helpers\Html::tag('button', Html::icon(self::ACTION_UPDATE), [
                'type'        => 'button',
                'class'       => 'btn btn-tab-form edit_select',
                'preset'      => \yii\helpers\Html::PRESET_SECONDARY,
                'id'          => $this->selector . '_update_button',
                'url'         => $this->url,
                'data-url'    => $this->url,
                'disabled'    => true,
                'data-update' => true,
                'data-toggle' => 'modal',
                'data-pk'     => $this->primaryKey,
                'data-target' => '#RelatedFormModal',
                'selector'    => $this->selector,
            ]) . // Render create icon
            \yii\helpers\Html::tag('button', Html::icon(self::ACTION_CREATE), [
                'type'        => 'button',
                'class'       => 'btn btn-tab-form add_select',
                'id'          => $this->selector . '_create_button',
                'preset'      => \yii\helpers\Html::PRESET_PRIMARY,
                'url'         => $this->url,
                'data-url'    => $this->url,
                'disabled'    => $this->depend,
                'data-toggle' => 'modal',
                'data-target' => '#RelatedFormModal',
                'selector'    => $this->selector,
            ]) . // Renders modal if need
            $this->renderModals();
    }

    /**
     *
     */
    public function registerAssets()
    {
        RelatedFormAsset::register($this->view);
    }

    /**
     * Render modal if type of relation form is modal
     * @return string
     * @throws \Exception
     */
    protected function renderModals()
    {
        // Rendering on end of view file
        if (! self::$modalCreated) {
            $this->registerModalJs();
            \Yii::$app->view->on(View::EVENT_END_BODY, function () {
                echo Modal::widget([
                    'clientOptions' => [
                        'backdrop' => 'static',
                        'keyboard' => false,
                    ],
                    'options'       => [
                        'id' => 'RelatedFormModal',
                    ],
                    'size'          => Modal::SIZE_LARGE,
                ]);
            });
            self::$modalCreated = true;
        }
    }

    /**
     *
     */
    protected function registerModalJs()
    {
        $js = <<<JS
// Enabling button if there is value, usually on update item form
$(document ).ready(function(){
    if ($('#{$this->selector}').val() != '') {
        $('#{$this->selector}_update_button').prop('disabled',false);
    }
});
JS;
        $this->view->registerJs($js, View::POS_END);
    }

}