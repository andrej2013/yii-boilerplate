<?php

namespace andrej2013\yiiboilerplate\modules\faq\models\base;

use andrej2013\yiiboilerplate\models\Language;
use Yii;
use \app\models\ActiveRecord;
use yii\db\Query;

/**
 * This is the base-model class for table "faq".
 * - - - - - - - - -
 * Generated by the modified Giiant CRUD Generator
 *
 * @property integer $id
 * @property string $title
 * @property string $content
 * @property string $language_id
 * @property string $place
 * @property integer $level
 * @property integer $order
 * @property integer $deleted_by
 * @property string $deleted_at
 * @property integer $created_by
 * @property string $created_at
 * @property integer $updated_by
 * @property string $updated_at
 * @property string $toString
 * @property string $entryDetails
 *
 * @property \app\models\Language $language
 */
class Faq extends ActiveRecord
{
    
    /**
     * ENUM field values
     */
    const PLACE_BACKEND = 'backend';
    const PLACE_FRONTEND = 'frontend';
    const ROOT_LEVEL = 0;
    protected $enum_labels = false;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'faq';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [
                ['title', 'content', 'language_id', 'place', 'level'],
                'required'
            ],
            [
                ['content', 'place'],
                'string'
            ],
            [
                ['level', 'order', 'deleted_by'],
                'integer'
            ],
            [
                ['deleted_at'],
                'safe'
            ],
            [
                ['title'],
                'string',
                'max' => 255
            ],
            [
                ['language_id'],
                'string',
                'max' => 5
            ],
            [
                ['language_id'],
                'exist',
                'skipOnError' => true,
                'targetClass' => Language::class,
                'targetAttribute' => ['language_id' => 'language_id']
            ],
            ['place', 'in', 'range' => [
                    self::PLACE_BACKEND,
                    self::PLACE_FRONTEND,
                ]
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'title' => Yii::t('app', 'Title'),
            'content' => Yii::t('app', 'Content'),
            'language_id' => Yii::t('app', 'Language'),
            'place' => Yii::t('app', 'Place'),
            'level' => Yii::t('app', 'Level'),
            'order' => Yii::t('app', 'Order'),
            'created_by' => Yii::t('app', 'Created By'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_by' => Yii::t('app', 'Updated By'),
            'updated_at' => Yii::t('app', 'Updated At'),
            'deleted_by' => Yii::t('app', 'Deleted By'),
            'deleted_at' => Yii::t('app', 'Deleted At'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributePlaceholders()
    {
        return [
        ];
    }


    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return [
        ];
    }

    /**
     * Auto generated method, that returns a human-readable name as string
     * for this model. This string can be called in foreign dropdown-fields or
     * foreign index-views as a representative value for the current instance.
     * @return String
     */
    public function toString()
    {
        return $this->title; // this attribute can be modified
    }


    /**
     * Getter for toString() function
     * @return String
     */
    public function getToString()
    {
        return $this->toString();
    }

    /**
     * @inheritdoc
     */
    public function extraFields()
    {
        return [
            'language',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getLanguage()
    {
        return $this->hasOne(Language::class, ['language_id' => 'language_id']);
    }
    

    public static function languageList($q = null)
    {
        return Language::filter($q);
    }

    /**
     * User for filtering results for Select2 element
     * @param null $q
     * @return array
     */
    public static function filter($q = null)
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $out = ['results' => ['id' => '', 'text' => '']];
        if (!is_null($q)) {
            $query = new \yii\db\Query();
            $query->select(['id', 'text' => 'title'])
                  ->from(self::tableName())
                  ->andWhere([self::tableName() . '.deleted_at' => null])
                  ->andWhere(['like', 'title', $q])
                  ->limit(20);
            $command = $query->createCommand();
            $data = $command->queryAll();
            $out['results'] = array_values($data);
        }
        return $out;
    }

    /**
     * @param $q
     * @return array
     */
    public static function selectSearch($q)
    {
        $out = [];
        $data = static::find()
                      ->select(['id', 'text' => 'title'])
                      ->andWhere(['LIKE', 'title', $q])
                      ->distinct()
                      ->orderBy('id')
                      ->asArray()
                      ->all();
        foreach ($data as $d) {
            $out['results'][] = $d;
        }
        return $out;
    }

    public function getLevelName()
    {
        $level = self::find()->andWhere(['id' => $this->level])->one();
        if ($level)
            return $level->toString;
        return Yii::t('app', 'Root');
    }

    public static function FaqLevelList($q = null, $id = null)
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $out = ['results' => ['id' => '', 'text' => '']];
        if (!is_null($q)) {
            $query = new Query();
            $query->select('id, title AS text')
                ->from(self::tableName())
                ->andWhere(['level' => self::ROOT_LEVEL])
                ->andWhere(['like', 'title', $q])
                ->limit(20);
            $command = $query->createCommand();
            $data = $command->queryAll();
            $out['results'] = array_values($data);
        } elseif ($id > 0) {
            $out['results'] = ['id' => $id, 'text' => User::find($id)->name];
        }
        return $out;
    }    
    
    public function beforeSave($insert)
    {
        $this->content = htmlspecialchars($this->content);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
    
    public function afterFind()
    {
        $this->content = htmlspecialchars_decode($this->content);
        parent::afterFind(); // TODO: Change the autogenerated stub
    }
}
