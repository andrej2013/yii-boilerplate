<?php
/**
 * Date: 20.01.14
 * Time: 13:26
 */

namespace andrej2013\yiiboilerplate\controllers;

use app\models\User;
use mihaildev\elfinder\Controller;
use yii\base\Exception;
use yii\db\ActiveRecord;


/**
 * Class Controller
 * @package mihaildev\elfinder
 * @property array $options
 */
class ElFinderBackendController extends Controller
{
    /**
     *
     */
    public function init()
    {
        // Unset not existing FS components
        foreach ($this->roots as $key => $root) {
            if (!\Yii::$app->has($root['component'])) {
                unset($this->roots[$key]);
            }
        }
        if (!\Yii::$app->user->identity->isAdmin) {
            $roots = $this->roots;
            $this->roots = [];
            foreach ($roots as $root) {
                if (\Yii::$app->has($root['component'])) {
                    if (isset($root['role']) && \Yii::$app->user->can($root['role'])) {
                        $this->roots[] = $root;
                    } elseif (!isset($root['role'])) {
                        $this->roots[] = $root;
                    }
                }
            }
        }
        $this->customShares();
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @return bool
     */
    protected function customShares()
    {
        /**
         * @var User           $user
         * @var ActiveRecord[] $entities
         */
        $shareParams = \Yii::$app->params['shares'];
        $user = \Yii::$app->user->identity;
        if (!isset($shareParams) || empty($shareParams) || $user->isAdmin) {
            return false;
        }
        $shares = [];
        foreach ($shareParams as $share) {
            $can = true;
            if (isset($share['roles'])) {
                $roles = !is_array($share['roles']) ? array($share['roles']) : $share['roles'];
                foreach ($roles as $role) {
                    if (!\Yii::$app->user->can($role)) {
                        $can = false;
                        break;
                    }
                }
            }

            if ($can == false || !isset($share['relationship']) || empty($share['relationship'])) {
                continue;
            }

            if (is_array($share['relationship'])) {
                $entities = [];
                foreach ($share['relationship'] as $key => $value) {
                    if (is_numeric($key)) {
                        throw new Exception('Relationship key must be string representing relation from User model extraFields() method');
                    }
                    if (is_array($value)) {
                        throw new Exception('Not supported more nested relationship');
                    }
                    $relationships = $user->$key;
                    $relationships = is_array($relationships) ? $relationships : array($relationships);
                    foreach ($relationships as $relationship) {
                        if ($relationship->$value) {
                            $entities[] = $relationship->$value;
                        }
                    }
                }
            } else {
                $entities = $user->{$share['relationship']};
            }
            $entities = is_array($entities) ? $entities : array($entities);
            foreach ($entities as $i => $entity) {
                $shares[$i]['class'] = 'andrej2013\yiiboilerplate\components\elfinder\flysystem\Volume';
                $shares[$i]['component'] = $share['component'];
                $label = isset($share['label']) ? $share['label'] : 'toString';
                $shares[$i]['name'] = $entity->$label;
                $fs = \Yii::$app->get($share['component']);
                $path = (isset($share['basePath']) ? rtrim($share['basePath'], '/') . '/' : '') .
                    (is_array($entity->primaryKey) ? implode('_', $entity->primaryKey) : $entity->primaryKey);
                if (!$fs->has($path)) {
                    $fs->createDir($path);
                }
                $shares[$i]['path'] = $path;
                if (isset($share['readOnly']) && $share['readOnly'] == true) {
                    $shares[$i]['options']['attributes'] = array(
                        array(
                            'pattern' => '/./',
                            'write' => 0,
                            'locked' => 1,
                        )
                    );
                }
            }
        }
        foreach ($shares as $share) {
            $this->roots[] = $share;
        }
    }
}
