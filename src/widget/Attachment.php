<?php
/**
 * Created by PhpStorm.
 * User: ntesic
 * Date: 2/22/19
 * Time: 1:10 PM
 */

namespace andrej2013\yiiboilerplate\widget;

use yii\base\Widget;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use \nemmo\attachments\components\AttachmentsInput;
use andrej2013\yiiboilerplate\widget\FileInput;
use nemmo\attachments\models\UploadForm;

class Attachment extends AttachmentsInput
{
    const INPUT   = 0;
    const PREVIEW = 1;

    public $theme;
    public $type = self::INPUT;
    public $attribute;

    public function init()
    {
        $this->pluginOptions = [
            'showBrowse'      => true,
            'dropZoneEnabled' => true,
            'theme'           => $this->theme,
        ];
        if ($this->type === self::PREVIEW) {
            $this->pluginOptions = [
                'theme'                   => 'explorer',
                'showCaption'             => false,
                'showUpload'              => false,
                'showRemove'              => false,
                'showBrowse'              => false,
                'dropZoneEnabled'         => false,
                'previewSettings'         => [
                    'pdf'    => [
                        'width' => 'auto',
                    ],
                    'office' => [
                        'width'  => 'auto',
                        'height' => '100%',
                    ],
                ],
                'previewFileIconSettings' => [
                    'jpg' => '<i class="fa fa-file-photo-o text-danger"></i>',
                    'pdf' => '<i class="fa fa-file-pdf-o text-danger"></i>',
                    'png' => '<i class="fa fa-file-photo-o text-primary"></i>',
                    'gif' => '<i class="fa fa-file-photo-o text-muted"></i>',
                    'xls' => '<i class="fa fa-file-excel-o text-success"></i>',
                    'doc' => '<i class="fa fa-file-word-o text-primary"></i>',
                    'zip' => '<i class="fa fa-file-archive-o text-muted"></i>',
                    'txt' => '<i class="fa fa-file-text-o text-info"></i>',
                    'htm' => '<i class="fa fa-file-code-o text-info"></i>',
                ],
                'previewFileExtSettings'  => [
                    'doc' => new \yii\web\JsExpression('function(ext) {
                    return ext.match(/(doc|docx)$/i);
                }'),
                    'xls' => new \yii\web\JsExpression('function(ext) {
                    return ext.match(/(xls|xlsx)$/i);
                }'),
                    'zip' => new \yii\web\JsExpression('function(ext) {
                    return ext.match(/(zip|rar|tar|gzip|gz|7z)$/i);
                }'),
                    'htm' => new \yii\web\JsExpression('function(ext) {
                    return ext.match(/(htm|html)$/i);
                }'),
                    'txt' => new \yii\web\JsExpression('function(ext) {
                    return ext.match(/(txt|ini|csv|java|php|js|css)$/i);
                }'),
                ],
            ];
        }
        $this->pluginOptions = ArrayHelper::merge($this->pluginOptions, [
            'showClose'              => false,
            'maxFileCount'           => 9999, // Client max files
            'overwriteInitial'       => false,
            'previewFileType'        => 'any',
            'allowedPreviewTypes'    => ['image', 'html', 'text', 'video', 'audio', 'flash', 'object'],
            'initialPreviewAsData'   => true,
            'initialPreviewFileType' => 'image',
            'purifyHtml'             => true,
            'preferIconicPreview'    => true,
            'previewFileIcon'        => '<i class="fa fa-file"></i>',
        ]);
        $this->options = [
            'multiple'    => true, // If you want to allow multiple upload, default to false
            'showMessage' => false,
        ];
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function run()
    {
        $fileinput = FileInput::widget([
            'model'         => new UploadForm(),
            'attribute'     => 'file[]',
            'options'       => $this->options,
            'pluginOptions' => $this->pluginOptions,
        ]);

        return $fileinput;
    }
}